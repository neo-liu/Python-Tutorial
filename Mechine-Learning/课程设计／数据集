import numpy as np
import csv
import matplotlib.pyplot as plt

# 产生单个随机时序信号，包含一个200点抽样的低内奎斯特采样信号和1000点抽样的内奎斯特采样信号
def signal(n, a, f, sample_training, sample_testing):

    # n是单信号谐波的叠加次数；a是单信号的振幅范围；f是单信号的频率信息
    # N ∈ [5 (1) 30]; A ∈ [0 (0.1) 1]; F ∈ [100 (1) 200]
    # sample_training = 200; sample_testing = 1000
    train_signal = 0
    test_signal = 0
    a_list = np.arange(a[0], a[1] + a[2], a[2])
    f_list = np.arange(f[0], f[1] + f[2], f[2])

    for index_N in range(n[0], n[1] + n[2], n[2]):

        # get train_signal(wave-form)，叠加产生低内奎斯特采样信号（200点）
        train_signal += np.random.randint(low=0, high=len(a_list), size=1) * np.sin(
            2 * np.pi * np.random.randint(low=0, high=len(f_list), size=1) * np.linspace(0, 1, 200)
        )

        # get test_signal(as same as train_signal)，叠加产生内奎斯特采样信号（1000点）
        # the difference is that test_signal has more sample point than test_signal
        # we call test_signal -- under-nyquist sample
        test_signal += np.random.randint(low=0, high=len(a_list), size=1) * np.sin(
            2 * np.pi * np.random.randint(low=0, high=len(f_list), size=1) * np.linspace(0, 1, 1000)
        )

    print('train_signal-'+str(type(train_signal)), len(train_signal))
    print('test signal-'+str(type(test_signal)), len(test_signal))
   
    # return a tuple including train_signal and test_signal
    return train_signal, test_signal
    
def dataset_generate(n, a, f, sample_training, sample_testing, num_iteration=8):

    # use list generation to instead 'for' loop for faster operation
    train_signal = [signal(n, a, f, sample_training, sample_testing)[0]
            for _ in range(num_iteration)]
    test_signal = [signal(n, a, f, sample_training, sample_testing)[1]
            for _ in range(num_iteration)]
    return train_signal, test_signal
    
# define hyperparameters
n = [5, 30, 1]
a = [0, 1, 0.1]
f = [100, 200, 1]
sample_training = 200
sample_testing = 1000

# generate traing and testing datasets
datasets = dataset_generate(n, a, f, sample_training, sample_testing)

with open('./another_training_data.csv', 'a', newline='') as csvfile1:
    writer1 = csv.writer(csvfile1)
    # writer.writerow(['train_data'])
    writer1.writerows(datasets[0])
with open('./another_testing_data.csv', 'a', newline='') as csvfile2:
    writer2 = csv.writer(csvfile2)
    # writer.writerow(['train_data'])
    writer2.writerows(datasets[1])

unsampled_dataset = [list() for _ in range(8)]
target_dataset = [list() for _ in range(8)]

with open('./another_training_data.csv', 'r') as csvfile1:
    reader1 = csv.reader(csvfile1)
    for i, line1 in enumerate(reader1):
        for data in line1:
            unsampled_dataset[i].append(np.float(data))
    print(type(np.array(unsampled_dataset)[0]))
with open('./another_testing_data.csv', 'r') as csvfile2:
    reader2 = csv.reader(csvfile2)
    for i, line2 in enumerate(reader2):
        for data in line2:
            target_dataset[i].append(np.float(data))
    print(type(np.array(target_dataset)[0]))

x1 = np.arange(0, 1, 1/200)
x2 = np.arange(0, 1, 1/1000)
print(unsampled_dataset[0])
print(target_dataset[0])

# 绘图
# jupyter notebook中不需要加入plt.show()
plt.subplot(211)
plt.plot(x1, unsampled_dataset[0])
plt.subplot(212)
plt.plot(x2, target_dataset[0])
plt.show()
